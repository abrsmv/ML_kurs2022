import pandas as pd

data = pd.read_csv('train_dataset_train.csv', sep=',')
data.head(10)

columns_to_drop = [
    'id',
    'ticket_id',
    'entrance_id',
    'station_id',
    'line_id'
]
columns_to_drop.append('entrance_nm')
data = data.drop(columns=columns_to_drop)
data.head()

data.isnull().sum()

data['pass_dttm'] = pd.to_datetime(data['pass_dttm'])
data['hour'] = data['pass_dttm'].dt.hour

data['time_of_day'] = data['hour'].apply(
    lambda hour: 'morning' if hour>=5 and hour<=10 else (
                 'day' if hour>=11 and hour<=16 else (
                 'evening' if hour>=17 and hour<=22 else 'night')))

data['is_weekend'] = data['pass_dttm'].dt.weekday>4

data.head(10)

# переводим категориальные признаки в векторы
data = pd.get_dummies(data, prefix='day', columns=['time_of_day'])
data = pd.get_dummies(data, prefix='weekend', columns=['is_weekend'])
data = pd.get_dummies(data, prefix='line', columns=['line_nm'])

columns_to_drop = [
    'pass_dttm',
    'hour',
    'weekend_False',
    'day_day'
]
data = data.drop(columns=columns_to_drop)

data.head()

# другие тоже обработаем
data['is_student'] = data['ticket_type_nm'].apply(
    lambda ticket_type_nm: 1 if 'учащ' in ticket_type_nm \
        or 'студент' in ticket_type_nm else 0)
data['is_social'] = data['ticket_type_nm'].apply(
    lambda ticket_type_nm: 1 if 'оциальн' in ticket_type_nm else 0)
# data = data.drop(columns='ticket_type_nm')
data.head(10)

from sklearn.feature_extraction import FeatureHasher

# h_ticket = FeatureHasher(n_features=3, input_type='string')
# hashed_Feature = h_ticket.fit_transform(data['ticket_type_nm'])
# hashed_Feature = hashed_Feature.toarray()
# data = pd.concat([data, pd.DataFrame(hashed_Feature)], axis=1)

# h_station = FeatureHasher(n_features=3, input_type='string')
# hashed_Feature = h_station.fit_transform(data['station_nm'])
# hashed_Feature = hashed_Feature.toarray()
# data = pd.concat([data, pd.DataFrame(hashed_Feature)], axis=1)

data.tail(10)

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

X = data.drop(columns=['time_to_under', 'label', 'station_nm', 'ticket_type_nm'])
y = data['time_to_under']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = LinearRegression()
model.fit(X_train, y_train)

y_predict = model.predict(X_test)

# y_predict = list(model.predict(X_test))
# y_test = list(y_test)

from sklearn.metrics import r2_score
r2_score(y_test, y_predict)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

columns_to_drop = [
    'time_to_under',
    'label',
    'station_nm',
    'ticket_type_nm'
]

X = data.drop(columns=columns_to_drop)
y = data['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05)

model = RandomForestClassifier(n_estimators=10)
model.fit(X_train, y_train)

y_predict = model.predict(X_test)

from sklearn.metrics import recall_score
recall_score(y_test, y_predict, average='micro')
